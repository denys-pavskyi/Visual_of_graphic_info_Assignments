// // Vertex shader
// const vertexShaderSource = `
// attribute vec3 vertex;
// attribute vec3 normal;
// varying vec3 normalInterp;
// uniform mat4 ModelViewProjectionMatrix;
// uniform mat4 NormalMatrix;
// uniform vec3 lightPos;
// varying vec4 color;

// void main() {
//     normalInterp = vec3(NormalMatrix * vec4(normal, 0.0));
//     vec3 N = normalize(normalInterp);
//     vec3 L = normalize(lightPos - vertex);
//     gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
//     float lambertian = max(dot(N, L), 0.0);
//     float specular = 0.0;
//     if(lambertian > 0.0) {
//         vec3 R = reflect(-L, N);      // Reflected light vector
//         vec3 V = normalize(-vertex); // Vector to viewer
//         // Compute the specular term
//         float specAngle = max(dot(R, V), 0.0);
//         specular=pow(specAngle,1.0);
//     }
//     vec3 ambientColor = vec3(0.1, 0.1, 0.05);
//     vec3 diffuseColor = vec3(1.0,1.0,0.5);
//     vec3 specularColor = vec3(0.0,0.0,0.0);
//     color = vec4(0.9 * ambientColor +
//                 0.9 * lambertian * diffuseColor +
//                 0.9 * specular * specularColor, 1.0);
// }`;


// // Fragment shader
// const fragmentShaderSource = `
// #ifdef GL_FRAGMENT_PRECISION_HIGH
//    precision highp float;
// #else
//    precision mediump float;
// #endif

// varying vec4 color;


// void main() {
//     gl_FragColor = color;
// }



// `;

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
varying vec3 normalInterp;
varying vec3 fragPos;
varying vec3 lightDir;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;
uniform vec3 lightPos;

void main() {
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    fragPos = vec3(ModelViewProjectionMatrix * vec4(vertex, 1.0));
    normalInterp = normalize(vec3(NormalMatrix * vec4(normal, 0.0)));
    lightDir = normalize(lightPos - fragPos);
}
`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 normalInterp;
varying vec3 fragPos;
varying vec3 lightDir;

void main() {
    vec3 ambientColor = vec3(0.1, 0.1, 0.05);
    vec3 diffuseColor = vec3(1.0, 1.0, 0.5);
    vec3 specularColor = vec3(0.0, 0.0, 0.0);

    vec3 normal = normalize(normalInterp);
    vec3 lightDirNorm = normalize(lightDir);
    vec3 viewDir = normalize(-fragPos);

    float lambertian = max(dot(normal, lightDirNorm), 0.0);
    float specular = 0.0;

    if (lambertian > 0.0) {
        vec3 reflectDir = reflect(-lightDirNorm, normal);
        float specAngle = max(dot(reflectDir, viewDir), 0.0);
        specular = pow(specAngle, 32.0); 
    }

    vec3 lighting = ambientColor + (lambertian * diffuseColor) + (specular * specularColor);
    gl_FragColor = vec4(lighting, 1.0);
}
`;